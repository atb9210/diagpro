version: '3.8'

services:
  # Laravel Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: diagpro-app
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-diagpro}
      - DB_USERNAME=${DB_USERNAME:-diagpro}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_STORE=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    volumes:
      - storage_data:/var/www/storage
      - ./docker/logs:/var/log
    depends_on:
      - mysql
      - redis
    networks:
      - diagpro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: diagpro-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_DATABASE:-diagpro}
      MYSQL_USER: ${DB_USERNAME:-diagpro}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"
    networks:
      - diagpro-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: diagpro-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - diagpro-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: diagpro-queue
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    environment:
      - APP_ENV=production
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-diagpro}
      - DB_USERNAME=${DB_USERNAME:-diagpro}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
    volumes:
      - storage_data:/var/www/storage
    depends_on:
      - mysql
      - redis
    networks:
      - diagpro-network

  # Scheduler (Cron)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: diagpro-scheduler
    restart: unless-stopped
    command: >
      sh -c "echo '* * * * * cd /var/www && php artisan schedule:run >> /dev/null 2>&1' | crontab - && crond -f"
    environment:
      - APP_ENV=production
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-diagpro}
      - DB_USERNAME=${DB_USERNAME:-diagpro}
      - DB_PASSWORD=${DB_PASSWORD}
    volumes:
      - storage_data:/var/www/storage
    depends_on:
      - mysql
      - redis
    networks:
      - diagpro-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  storage_data:
    driver: local

networks:
  diagpro-network:
    driver: bridge